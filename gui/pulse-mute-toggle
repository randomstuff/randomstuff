#!/usr/bin/python3

"""
Toggle PulseAudio default source mute with desktop notification.
"""

from sys import argv
from os import system
import dbus


def get_pulse_dbus_connection() -> str:
    session_bus = dbus.SessionBus()
    obj = session_bus.get_object("org.PulseAudio1", "/org/pulseaudio/server_lookup1")
    iface = dbus.Interface(obj, "org.freedesktop.DBus.Properties")
    address = iface.Get("org.PulseAudio.ServerLookup1", "Address")
    return dbus.connection.Connection(address)


def notify(summary: str, body: str, icon: str = ""):
    """
    Generate a notification
    """
    session_bus = dbus.SessionBus()
    obj = session_bus.get_object(
        "org.freedesktop.Notifications", "/org/freedesktop/Notifications"
    )
    iface = dbus.Interface(obj, "org.freedesktop.Notifications")
    app_name = "toggle-mute-pulse"
    replaces_id = 0
    actions = []
    hints = {"category": "device"}
    expire_timeout = 2000
    iface.Notify(
        app_name, replaces_id, icon, summary, body, actions, hints, expire_timeout
    )


def toggle_mute_device(device) -> bool:
    device_props = dbus.Interface(device, "org.freedesktop.DBus.Properties")
    mute = device_props.Get("org.PulseAudio.Core1.Device", "Mute")
    device_props.Set("org.PulseAudio.Core1.Device", "Mute", not mute)
    return not mute


def main():
    # TODO, CLI arguments (choose sink/source)
    if len(argv) > 1:
        raise Exception("Bad argument")

    try:
        connection = get_pulse_dbus_connection()
    except:
        system("pacmd load-module module-dbus-protocol")
        connection = get_pulse_dbus_connection()
    obj = connection.get_object("org.PulseAudio.Core1", "/org/pulseaudio/core1")
    core = dbus.Interface(obj, "org.PulseAudio.Core1")

    props = dbus.Interface(obj, "org.freedesktop.DBus.Properties")
    device_path = props.Get("org.PulseAudio.Core1", "FallbackSource")

    device = connection.get_object("org.PulseAudio.Core1", device_path)
    mute = toggle_mute_device(device)

    notify("Audio source " + ("muted" if mute else "unmuted"), "")


if __name__ == "__main__":
    main()
