#!/usr/bin/python3

import sys
import os
import signal

import click

from Xlib import X, display, Xutil
from Xlib.protocol import request
from Xlib.XK import string_to_keysym


def set_mic(status):
    """
    Enable/disable mic.
    """
    # TODO, use configure using dbus directly
    if status:
        os.system("pacmd set-source-mute @DEFAULT_SOURCE@ 0")
    else:
        os.system("pacmd set-source-mute @DEFAULT_SOURCE@ 1")


def get_new_status(d):
    event = d.next_event()
    new_status = None
    if event.type == X.KeyPress:
        new_status = True
    elif event.type == X.KeyRelease:
        new_status = False
    while d.pending_events() != 0:
        event = d.next_event()
        if event.type == X.KeyPress:
            new_status = True
        elif event.type == X.KeyRelease:
            new_status = False
    return new_status


@click.command()
@click.option("--key", help="Key name (eg. Home).", required=True)
def main(key):
    """
    Push-to-talk for Pulseaudio and X11.

    Enable audio input (mic) by holding a key.
    """
    # TODO, enable modifiers support
    # TODO, configure source

    d = display.Display()
    screen = d.screen()
    root = screen.root

    keysym = string_to_keysym(key)
    for (keycode, _i) in d.keysym_to_keycodes(keysym):
        root.grab_key(
            key=keycode,
            modifiers=X.AnyModifier,
            owner_events=False,
            pointer_mode=X.GrabModeAsync,
            keyboard_mode=X.GrabModeAsync,
        )

    root.change_attributes(event_mask=X.KeyPressMask | X.KeyReleaseMask)

    signal.signal(signal.SIGINT, signal.default_int_handler)
    try:
        set_mic(False)
        status = False
        while True:
            new_status = get_new_status(d)
            if new_status is not None and new_status != status:
                set_mic(new_status)
                status = new_status
    finally:
        # TODO, restore original status
        set_mic(True)


if __name__ == "__main__":
    main()
