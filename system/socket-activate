#!/usr/bin/python3

# The MIT License (MIT)
#
# Copyright (c) 2016 Gabriel Corona
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

"""
Summary
-------

Launch a child process by passing file descriptors using LISTEN_FDS.

Usage
-----

socket-activate --socket family=INET type=DGRAM proto=udp bind=[::1]:5353 \\
  -- ./dnsfwd --connect-tcp 127.0.01:53 --loglevel 8

socket-activate --socket userns=/proc/28039/ns/user netns=/proc/28039/ns/net \\
    family=INET type=STREAM listen=10 bind=127.0.0.1:9992 \\
    -- python3 socket-listen-inetd cat

TODO
----
* UNIX socket support
* VSOCK socket support
* TUN support
* FIFO support
* ulimit
* Options:
  * TCP_NODELAY
  * SO_BINDTODEVICE
  * SO_DONTROUTE
  * etc.
"""

import socket
import sys
import os
import array
import selectors


def parse_family(family):
    """
    Parse an addres family (INET, INET6, LOCAL, etc.)
    """
    if not type(family) == str:
        return family
    try:
        return int(family)
    except ValueError:
        return getattr(socket, "AF_" + family)


def parse_type(socktype):
    """
    Parse a socket type (STREAM, DGRAM, SEQPACKET, etc.).
    """
    if not type(socktype) == str:
        return socktype
    try:
        return int(socktype)
    except ValueError:
        return getattr(socket, "SOCK_" + socktype)


def parse_proto(family, proto):
    """
    Parse a protocol (TCP, tcp, L2CAP, etc.)
    """
    if not type(proto) == str:
        return proto
    try:
        return int(proto)
    except ValueError:
        pass
    if family == socket.AF_CAN:
        return getattr(socket, "CAN_" + proto)
    if family == socket.AF_BLUETOOTH:
        return getattr(socket, "BTPROTO_" + proto)
    if family == socket.AF_INET or family == socket.AF_INET6:
        try:
            return getattr(socket, "IPPROTO_" + proto)
        except AttributeError:
            return socket.getprotobyname(proto)
    raise ValueError


_type = type


def parse_addr(family, addr, *, type=0, proto=0):
    if _type(addr) != str:
        return addr
    elif family == socket.AF_INET or family == socket.AF_INET6:
        i = addr.rfind(":")
        port = addr[i + 1 :]
        addr = addr[:i]
        if addr[0] == "[" and addr[-1] == "]":
            addr = addr[1:-2]
        res = socket.getaddrinfo(addr, port, family=family, type=type, proto=proto)
        return res[0][4]
    elif family == socket.AF_UNIX:
        if addr.startswith("@"):
            return b"\0" + addr[1:].encode("UTF-8")
        else:
            return addr
    else:
        raise Exception("Cannot handle family type")


class SocketDefinition:
    """
    Description of a socket we want to create.
    """

    def __init__(
        self,
        family=socket.AF_INET6,
        type=socket.SOCK_STREAM,
        proto=0,
        *,
        name="unknown",
        listen=None,
        bind=None,
        connect=None,
        netns=None,
        userns=None,
        mountns=None,
    ):
        self.family = parse_family(family)
        self.type = parse_type(type)
        self.proto = parse_proto(self.family, proto)
        if bind is not None:
            self.bind = parse_addr(self.family, bind, type=self.type)
        else:
            self.bind = None
        if connect is not None:
            self.connect = parse_addr(self.family, connect, type=self.type)
        else:
            self.connect = None
        if listen is not None:
            self.listen = int(listen)
        else:
            self.listen = None

        self.name = name
        self.netns = netns
        self.userns = userns
        self.mountns = mountns

    def _create_socket(self):
        s = socket.socket(self.family, self.type, self.proto)
        if self.bind is not None:
            s.bind(self.bind)
        if self.connect is not None:
            s.connect(self.connect)
        if self.listen is not None:
            s.listen(self.listen)
        return s

    def _join_ns(self, path, type):
        if path is None:
            return
        fd = os.open(path, os.O_RDONLY)
        try:
            os.setns(fd, type)
        finally:
            os.close(fd)

    def create(self):
        """
        Create the socket.
        """
        if self.netns is not None or self.userns is not None:
            # We create a child process ...
            (sock1, sock2) = socket.socketpair(socket.AF_UNIX, socket.SOCK_STREAM)
            pid = os.fork()
            if pid == 0:
                # ... which joins the namespaces, ...
                self._join_ns(self.userns, os.CLONE_NEWUSER)
                self._join_ns(self.netns, os.CLONE_NEWNET)
                self._join_ns(self.mountns, os.CLONE_NEWNS)
                try:
                    sock1.close()
                    # ... creates the socket ...
                    sock = self._create_socket()
                    # ... and then passes the created socket to the main process.
                    ancdata = [
                        (
                            socket.SOL_SOCKET,
                            socket.SCM_RIGHTS,
                            array.array("i", [sock.fileno()]),
                        )
                    ]
                    sock2.sendmsg([b"\0"], ancdata)
                    os._exit(0)
                except:
                    os._exit(255)
            # Main process: receive the socket from the child process.
            sock2.close()
            fds = array.array("i")
            cmsg_len = socket.CMSG_LEN(fds.itemsize)
            msg, ancdata, flags, addr = sock1.recvmsg(1, cmsg_len)
            for cmsg_level, cmsg_type, cmsg_data in ancdata:
                if (cmsg_level, cmsg_type) == (socket.SOL_SOCKET, socket.SCM_RIGHTS):
                    fds.frombytes(cmsg_data)
                    sock = socket.fromfd(fds[0], self.family, self.type, self.proto)
                    os.close(fds[0])
                    sock1.close()
                    return sock
            else:
                raise Exception("Missing socket")
        else:
            return self._create_socket()


user = None
group = None
defs = []


def to_kw(param):
    i = param.index("=")
    return (param[:i], param[i + 1 :])


lazy = False

# Parse arguments:
i = 1
while i < len(sys.argv):
    arg = sys.argv[i]
    if arg == "--":
        i = i + 1
        break
    if arg == "--lazy":
        lazy = True
        i = i + 1
    elif arg == "--eager":
        lazy = False
        i = i + 1
    elif arg == "--socket":
        j = i + 1
        while j < len(sys.argv):
            if sys.argv[j].startswith("--"):
                break
            j = j + 1
        params = dict([to_kw(param) for param in sys.argv[i + 1 : j]])
        defs.append(SocketDefinition(**params))
        i = j
    elif arg == "--user":
        user = sys.argv[i + 1]
        i = i + 2
    elif arg == "--group":
        group = sys.argv[i + 1]
        i = i + 2
    else:
        raise NotImplementedError
exec_argv = sys.argv[i:]

# Create the sockets:
for i, definition in enumerate(defs):
    s = definition.create()
    s.set_inheritable(True)
    # Move it at the suitable place:
    if s.fileno() != i + 3:
        os.dup2(s.fileno(), i + 3)
        s.close()
    else:
        s.detach()

# Change user and group:
uid = None
gid = None
if group != None:
    import grp

    try:
        gid = int(group)
    except ValueError:
        gid = grp.getgrnam(group).gr_gid
if user != None:
    import pwd

    try:
        uid = int(user)
    except ValueError:
        ent = pwd.getpwnam(user)
        uid = ent.pw_uid
        if gid == None:
            gid = ent.pw_gid
if gid != None:
    os.setgid(gid)
if uid != None:
    os.setuid(uid)

# Prepare the environment:
os.environ["LISTEN_FDS"] = str(len(defs))
os.environ["LISTEN_PID"] = str(os.getpid())
os.environ["LISTEN_FDNAMES"] = ":".join([definition.name for definition in defs])

if lazy:
    selector = selectors.DefaultSelector()
    for i in range(len(defs)):
        selector.register(i + 3, selectors.EVENT_READ)
    events = selector.select()

# Exec:
os.execvp(exec_argv[0], exec_argv)
exit(255)
